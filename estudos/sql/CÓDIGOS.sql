/* Modelagem Básica */

CLIENTE

NOME - CARACTER (30)
CPF - NUMERICO (11)
EMAIL - CARACTER (30)
TELEFONE - CARACTER (30)
ENDERECO - CARACTER (100)
SEXO -  CARACTER (1)

/* PROCESSOS DE MODELAGEM */

/* FASE 01 E FASE 02 - AD = ADM DE DADOS*/
MODELAGEM CONCEITUAL - RASCUNHO
MODELAGEM LÓGICA - PROGRAMA DE MODELAGEM DE DADOS
/* FASE 03 - DBA / AD*/
MODELAGEM FÍSICA = SCRIPTS DE BANCO

/*MOSTRA AS DATABASES*/
SHOW DATABASES;

/* CRIANDO A BASE DE DADOS*/
CREATE DATABASE PROJETO;

/*ESCOLHENDO A BASE DE DADOS*/
USE PROJETO;

/*CRIANDO A TABELA*/
CREATE TABLE CLIENTE(
	NOME VARCHAR(30),
	SEXO CHAR(1),
	EMAIL VARCHAR(30),
	CPF INT (11),
	TELEFONE VARCHAR (30),
	ENDERECO VARCHAR(100)
);

/*MOSTRANDO AS TABELAS DO BD*/
SHOW TABLES;

/*MOSTRAR A TABELA QUE ESTÁ TRABALHANDO*/
STATUS;

/* DESCOBRINDO A ESTRUTURA DE UMA TABELA*/
DESC CLIENTE;

/*MODOS DE INSERIR VALORES NA TABELA*/

	/*INSERINDO OMITINDO AS COLUNAS*/
INSERT INTO CLIENTE VALUES ("JOAO","M","JOAO@GMAIL.COM",988638273,"22923110","MAIA LACERDA - ESTACIO - RIO DE JANEIRO - RJ");

INSERT INTO CLIENTE VALUES ("JOAO","M","JOAO@GMAIL.COM",988638273,"MAIA LACERDA - ESTACIO - RIO DE JANEIRO - RJ");

/* FORMA 02 - COLOCANDO AS COLUNAS */
INSERT INTO CLIENTE(NOME,SEXO,ENDERECO,TELEFONE,CPF) VALUES('LILIAN','F','SENADOR SOARES - TIJUCA - RIO DE JANEIRO - RJ','947785696',887774856);

INSERT INTO CLIENTE(NOME,SEXO,ENDERECO,TELEFONE,CPF) VALUES('CLARA','F','SENADOR SOARES - TIJUCA - RIO DE JANEIRO - RJ','883665843',99999999999);

INSERT INTO CLIENTE(NOME,SEXO,ENDERECO,TELEFONE,CPF) VALUES('CLARA','F','SENADOR SOARES - TIJUCA - RIO DE JANEIRO - RJ','883665843',2222222222); /*<- esse código vai dar errado por conta que passou do limite do INT, está no diciónário do mySQL o limite*/

/* O COMANDO SELECT 
selecao projecao e juncao
*/
/* projeções*/
SELECT NOW() as DATA_HORA, 'FELIPE MAFRA' AS PROFESSOR;

SELECT 'FELIPE MAFRA';

SELECT 'BANCO DE DADOS';

/*ALIAS DE COLUNAS*/
SELECT nome AS cliente, sexo, email FROM cliente;

SELECT NOME, SEXO, EMAIL, ENDERECO FROM cliente;

/* APENAS PARA FINS ACADEMICOS*/
SELECT * FROM CLIENTE;

/*selecionando dados/filtrando com where e like*/

SELECT NOME, SEXO FROM CLIENTE WHERE SEXO = "M";

SELECT NOME, ENDERECO FROM CLIENTE WHERE SEXO = "F";

SELECT NOME, CPF FROM CLIENTE WHERE ENDERECO = "RJ"; /*<- dá errado por conta que não existe RJ na tabela, precisa colocar o restante*/

/*Like ele serve para pegar pro aproximação, quer dizer que contém*/
SELECT NOME, CPF FROM CLIENTE WHERE ENDERECO LIKE "RJ"; /*<- dá errado por conta que não existe RJ na tabela, precisa colocar o restante*/	

SELECT NOME, CPF FROM CLIENTE WHERE ENDERECO LIKE "%RJ"; /*<ele PRECISA DE caractere coringa que é a % que significa qualquer coisa*/	

SELECT NOME, CPF,ENDERECO FROM CLIENTE WHERE ENDERECO LIKE "%RJ"; /*<- só pra confirmar o endereço*/	

SELECT NOME, SEXO, ENDERECO FROM CLIENTE WHERE ENDERECO LIKE "OSCAR CURY%";/* A porcentagem veio depois por conta que eu não sei o restante e ele irá mostrar*/

SELECT NOME, SEXO, ENDERECO FROM CLIENTE WHERE ENDERECO LIKE "%CENTRO%";/* A porcentagem mostra que não sabe o que vem antes e depois*/



CREATE DATABASE LIVRARIA;

INSERT INTO CLIENTE(IDPESSOA,NOME,SEXO,ENDERECO,TELEFONE,CPF) VALUES('CLARA','F','SENADOR SOARES - TIJUCA - RIO DE JANEIRO - RJ','883665843',99999999999);

CREATE TABLE LIVROO(
	IDPESSOA INT(11) AUTO_INCREMENT NOT NULL,
	NOMELIVRO VARCHAR(50),
	NOMEAUTOR VARCHAR(50),
	SEXO CHAR(1),
	PAGINAS INT (10),
	EDITORA VARCHAR (30),
	VALOR_LIVRO FLOAT(10,2),
	UF CHAR(2),
	ANOPUBLI INT(4),
	PRIMARY KEY (IDPESSOA)
);

INSERT INTO LIVRO(NOMELIVRO,NOMEAUTOR,SEXO,PAGINAS,EDITORA,VALOR_LIVRO,UF,ANOPUBLI) VALUES("Cavaleiro Real","Ana Claudia","F",465,"Atlas",49.90,"RJ",2009);

INSERT INTO LIVRO(NOMELIVRO,NOMEAUTOR,SEXO,PAGINAS,EDITORA,VALOR_LIVRO,UF,ANOPUBLI) VALUES("SQL para leigos","João Nunes","M",450,"ADDISON",98,"SP",2018),("Receitas Caseiras","Celia Tavares","F",210,"Atlas",45,"RJ",2008);

INSERT INTO LIVRO(NOMELIVRO,NOMEAUTOR,SEXO,PAGINAS,EDITORA,VALOR_LIVRO,UF,ANOPUBLI) VALUES('Habitos Saudáveis','Eduardo Santos','M',630,'Beta',150,'RJ',2019),('A Casa Marrom','Hermes Macedo','M',250,'Bubba',60,'MG',2016),('Estacio Querido','Geraldo Francisco','M',310,'Insignia',100,'ES',2015),('Pra sempre amigas','Leda Silva','F',510,'Insignia',78,'ES',2011),('Copas Inesqueciveis','Marco Alcantara','M',200,'Larson',130,'RS',2018),('O poder da mente','Clara Mafra','F',120,'Continental',56,'SP',2017);

INSERT INTO LIVRO(NOMELIVRO,NOMEAUTOR,SEXO,PAGINAS,EDITORA,VALOR_LIVRO,UF,ANOPUBLI) VALUES('Pessoas Efetivas','Eduardo Santos','M',390,'Beta',78,'RJ',2018);

/*exercícios*/
1 - SELECT * FROM LIVRO;
2- SELECT NOMELIVRO, EDITORA FROM LIVRO;
3 - SELECT NOMELIVRO, UF FROM LIVRO WHERE SEXO = "M";
3.1 - SELECT NOMELIVRO, UF,SEXO FROM LIVRO WHERE SEXO = "M";
4 - SELECT NOMELIVRO,PAGINAS FROM LIVRO WHERE SEXO="F";
5 - SELECT EDITORA,VALOR_LIVRO FROM LIVRO WHERE UF = "SP";
6 - SELECT NOMEAUTOR,SEXO,UF FROM LIVRO WHERE SEXO = "M" AND UF = "SP" OR UF = "RJ";

SELECT COUNT(*) FROM CLIENTE;

SELECT COUNT(*) AS "Quantidade de Registro dos clientes" FROM CLIENTE;

select count(*) from cliente WHERE SEXO="M";

SELECT SEXO, COUNT(*) FROM CLIENTE; /*ELE ESTÁ CONTANDO AS LINHAS PREENCHIDAS NO SEXO E CONTA TUDO NÃO É APENAS O M*/

SELECT SEXO, COUNT(*) AS "Separado sexo M e F" FROM CLIENTE GROUP BY sexo; /* ELE AGRUPA, SE TIVER MAIS DE UMA ANA ELA CAI NO GRUPO(os rafas da unimed iriam sair aqui que são mais de 3)*/

SELECT NOME, SEXO, ENDERECO FROM CLIENTE WHERE SEXO = "F" AND ENDERECO LIKE "%RJ";

create table funcionarios
  (
      idFuncionario integer,
      nome varchar(100),
      email varchar(200),
      sexo varchar(10),
      departamento varchar(100),
      admissao varchar(10),
      salario integer,
      cargo varchar(100),
      idRegiao int
  );

--Traga os funcionarios que trabalhem
--no departamento de filmes OU no
--departamento de roupas

SELECT  departamento, COUNT(*) AS "Resultado" FROM funcionarios WHERE departamento = "ROUPAS" OR departamento = "FILMES" GROUP BY departamento;

SELECT  departamento FROM funcionarios WHERE departamento = "ROUPAS" OR departamento = "FILMES";


SELECT COUNT(*), departamento FROM FUNCIONARIOS
group by departamento
order by 1; -- ORDER BY ELE COLOCA EM ORDEM ALFABÉTICA OU CRESCENTE PARA DECRESCENTE

--O gestor de marketing pediu a lista das funcionarias (AS) = FEMININO que trabalhem no departamento 
--de filmes ou no departamento lar. Ele necessita enviar um email para as colaboradoras
--desses dois setores. OR +  AND *

select nome,email from funcionarios where sexo="F" and departamento = "LAR" OR departamento="FILMES"; -- TOTALMENTE ERRADO O CORREÓ ESTÁ NA LINHA 184

--52 | Lar  21 Filmes
select count(*), departamento
from funcionarios
group by departamento;

SELECT * FROM FUNCIONARIOS
WHERE ( DEPARTAMENTO = 'Lar' AND SEXO = 'Feminino' ) OR
( DEPARTAMENTO = 'Filmes' AND SEXO = 'Feminino' );

SELECT DEPARTAMENTO, COUNT(*) FROM FUNCIONARIOS
WHERE ( DEPARTAMENTO = 'Lar' AND SEXO = 'Feminino' ) OR ( DEPARTAMENTO = 'Filmes' AND SEXO = 'Feminino' )
GROUP BY departamento;

--Traga os funcionarios do sexo masculino
--ou os funcionarios que trabalhem no setor Jardim
SELECT NOME, DEPARTAMENTO FROM FUNCIONARIOS WHERE SEXO = "Masculino" OR departamento="Jardim";

SELECT NOME, SEXO, ENDERECO
FROM CLIENTE
WHERE sexo = 'F';

SELECT NOME, SEXO, ENDERECO
FROM CLIENTE
WHERE EMAIL = NULL; -- ESTÁ ERRADO, É UTILIZADO IS NULL

SELECT NOME, SEXO, ENDERECO
FROM CLIENTE
WHERE EMAIL IS NULL; -- CORRETO

SELECT NOME, SEXO, ENDERECO
FROM CLIENTE
WHERE EMAIL IS NOT NULL;

-- UPDATE -- 
UPDATE CLIENTE
SET EMAIL = 'LILIAN@HOTMAIL.COM'; -- todos irão virar lilian

SELECT * FROM CLIENTE
WHERE NOME = 'LILIAN';

UPDATE CLIENTE
SET EMAIL = 'LILIAN@HOTMIAL.COM'
WHERE NOME = 'LILIAN';

----REGRA PARA FAZER UMA MODELAGEM DE DADOS SEM ERRO----

/*
1- TODO CAMPO VETORIZADO SE TORNARÁ UMA TABELA
[AMARELO, AZUL, LARANJA, VERDE] -> CORES
[KA, FIESTA,UNO,CIVIC] -> CARROS

2 - TODO CAMPO MULTIVALORADO SE TORNARÁ OUTRA TABELA.
QUANDO O CAMPO FOR DIVISIVEL

3 - toda tabela necessita de pelo menos um campo que
identifique todo o registro como sendo único
(primary key)

TEMOS 2 CHAVES DENTRO DO BD

NATURAL = NATURAL DO PRÓPRIO REGISTRO
ARTIFICIAL =  É GERADO PELO BD

*/

-- ENUM SÓ EXISTE NO MYSQL
-- UNIQUE É VALOR DE EMAIL ÚNICO
DROP TABLE CLIENTE;

CREATE TABLE CLIENTE(
	IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
	SEXO ENUM("F","M") NOT NULL,
	EMAIL VARCHAR(50) UNIQUE,
	CPF VARCHAR(15) UNIQUE 
);

CREATE TABLE ENDERECO(
	IDENDERECO INT PRIMARY KEY AUTO_INCREMENT,
	RUA VARCHAR(30) NOT NULL,
	BAIRRO VARCHAR(30) NOT NULL,
	CIDADE VARCHAR(30) NOT NULL,
	ESTADO CHAR (2) NOT NULL,
	ID_CLIENTE INT UNIQUE, -- TRANSFORMOU O RELACIONAMENTO 1 PARA 1
	FOREIGN KEY (ID_CLIENTE)
	REFERENCES CLIENTE(IDCLIENTE)
);

CREATE TABLE TELEFONE(
	IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
	TIPO ENUM ("RES","COM","CEL") NOT NULL,
	NUMERO VARCHAR(10) NOT NULL,
	ID_CLIENTE INT, -- RELACIONAMENTO 1 PARA ANY
	FOREIGN KEY (ID_CLIENTE)
	REFERENCES CLIENTE (IDCLIENTE)
);

-- DROP TABLE;
-- DESC CLIENTE; mostra  estrutura da tabela

INSERT INTO CLIENTE VALUES(NULL,"JOAO","M"); -- ERRADO PORQUE ESTÁ FALANDANDO DADOS

INSERT INTO CLIENTE VALUES(NULL,"JOAO","M",'JOAOA@IG.COM','5646546456');

select * from cliente;

INSERT INTO CLIENTE VALUES(NULL,"CARLOS","M",'CARLOSA@IG.COM','983455464');
INSERT INTO CLIENTE VALUES(NULL,"ANA","F",'AMA@IG.COM','32132155');
INSERT INTO CLIENTE VALUES(NULL,"CLARA","F",NULL,'566545654');
INSERT INTO CLIENTE VALUES(NULL,"CELIA","F",'JELIA@IG.COM','23132121');
INSERT INTO CLIENTE VALUES(NULL,"JORGE","M",'JORGE@IG.COM','23745778');

+-----------+--------+------+----------------+------------+
| IDCLIENTE | NOME   | SEXO | EMAIL          | CPF        |
+-----------+--------+------+----------------+------------+
|         1 | JOAO   | M    | JOAOA@IG.COM   | 5646546456 |
|         2 | CARLOS | M    | CARLOSA@IG.COM | 983455464  |
|         4 | CLARA  | F    | NULL           | 566545654  |
|         5 | CELIA  | F    | JELIA@IG.COM   | 23132121   |
|         6 | JORGE  | M    | JORGE@IG.COM   | 23745778   |
|         7 | ANA    | F    | AMA@IG.COM     | 32132155   |
+-----------+--------+------+----------------+------------+

INSERT INTO ENDERECO VALUES (NULL, "RUA ANTONIO SA","CENTRO","B. HORIZONTE","MG",4);
-- O NÚMERO 4 JÁ É A LIGAÇÃO

INSERT INTO ENDERECO VALUES (NULL, "RUA ANTONIO SA","CENTRO","B. HORIZONTE","MG",4);
INSERT INTO ENDERECO VALUES (NULL, "RUA CAPITÃO HERMES","CENTRO","RIO DE JANEIRO","RJ",1);
INSERT INTO ENDERECO VALUES (NULL, "RUA PRES VARGVAS","JARDINS","SÃO PAULO","SP",3);
INSERT INTO ENDERECO VALUES (NULL, "RUA ANFANDEGA","ESTACIO","RIO DE JANEIRO","RJ",2);
INSERT INTO ENDERECO VALUES (NULL, "RUA DO OUVIDOR","FLAMENGO","RIO DE JANEIRO","RJ",6);
INSERT INTO ENDERECO VALUES (NULL, "RUA URUGUAINA","CENTRO","VITÓRIA","ES",5);

 INSERT INTO TELEFONE  (NULL, "CEL","56454644",5); -- NÃO VAI INSERIR 

INSERT INTO TELEFONE VALUES (NULL, "CEL","56454644",5); 
INSERT INTO TELEFONE VALUES (NULL, "CEL","88851210",5); 
INSERT INTO TELEFONE VALUES (NULL, "CEL","66665405",5); 
INSERT INTO TELEFONE VALUES (NULL, "CEL","23123555",1); 
INSERT INTO TELEFONE VALUES (NULL, "CEL","88886445",2); 
INSERT INTO TELEFONE VALUES (NULL, "CEL","88767565",6); 
INSERT INTO TELEFONE VALUES (NULL, "CEL","21235566",5); 
INSERT INTO TELEFONE VALUES (NULL, "CEL","54687556",7); 

SELECT nome, sexo, bairro, cidade
FROM cliente 
INNER JOIN endereco
ON idcliente = id_cliente;


SELECT nome, sexo, bairro, cidade
FROM cliente 
	INNER JOIN endereco
	ON idcliente = id_cliente
WHERE sexo ="F";

SELECT nome, sexo, email, tipo, numero
FROM cliente
 INNER JOIN telefone
 on idcliente = id_cliente


SELECT cliente.nome, cliente.sexo, endereco.bairro, endereco.cidade, telefone.tipo, telefone.numero
FROM cliente 
INNER JOIN endereco ON cliente.idcliente=endereco.id_cliente
INNER JOIN telefone ON cliente.idcliente=telefone.id_cliente;



SELECT c.nome, c.sexo, e.bairro, e.cidade, t.tipo, t.numero
FROM cliente  c
INNER JOIN endereco e ON c.idcliente=e.id_cliente
INNER JOIN telefone t ON c.idcliente=t.id_cliente;

CATEGORIA PARA LOCALIZAR O BANCO DE DADOS

/*
	
	DML - DATA MANIPULATION LANGUAGE
	DDL - DATA DEFINITION LANGUAGE
	DCL - DATA CONTROL LANGUAGE
	TCL - TRANSACTION CONTROL LANGUAGE

*/


INSERT INTO cliente VALUES(NULL, "PAULA","M",NULL,"77437493");
INSERT INTO endereco VALUES(NULL,"RUA JOAQUIM SILVA","ALVORADA","NITEROI","RJ",8)

/* FILTROS */

SELECT * FROM CLIENTE
WHERE sexo ="M";

/* UPDATE */


SELECT * FROM CLIENTE
WHERE IDCLIENTE = 8;

UPDATE cliente
SET SEXO = "F"
WHERE IDCLIENTE = 8;

/* DELETE*/

INSERT INTO cliente VALUES(NULL, "xxx","M",NULL,"xxx");
SELECT * FROM CLIENTE;

DELETE FROM CLIENTE
WHERE IDCLIENTE = 9;


/*
-- DDL DATA DEFINITION LANGUAGE
*/

CREATE TABLE PRODUTO(
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME_PRODUTO VARCHAR(30) NOT NULL,
	PRECO INT,
	FRETE FLOAT(10,2) NOT NULL
);

-- ALTER TABLE
alterar coluna

ALTER TABLE PRODUTO
CHANGE PRECO VALOR_UNITARIO INT NOT NULL; -- ALTERAR NOME DA TABELA E ADICIONAR OU ALTERAR OS DADOS

ALTER TABLE PRODUTO
CHANGE VALOR_UNITARIO VALOR_UNITARIO INT; -- TEM FORMA MAIS EFICIENTE DE MUDAR OS DADOS

-- MODIFY

ALTER TABLE PRODUTO
MODIFY VALOR_UNITARIO VARCHAR (50) NOT NULL; -- MUDA O TIPO DO DADO

-- ADICIONANDO COLUNAS

ALTER TABLE PRODUTO
ADD PESO FLOAT(10,2) NOT NULL;

-- apagando uma coluna

ALTER TABLE PRODUTO
DROP COLUMN PESO;

-- ADD UMa COLUNA NA ORDEM ESPEFÍCA

ALTER TABLE PRODUTO
ADD COLUMN PESO FLOAT(10,2) NOT NULL
AFTER NOME_PRODUTO;

ALTER TABLE PRODUTO
ADD COLUMN PESO FLOAT(10,2) NOT NULL
FIRST;

CREATE DATABASE COMERCIO;

+-----------+---------------+------+-----+---------+----------------+
| Field     | Type          | Null | Key | Default | Extra          |
+-----------+---------------+------+-----+---------+----------------+
| IDCLIENTE | int(11)       | NO   | PRI | NULL    | auto_increment |
| NOME      | varchar(30)   | NO   |     | NULL    |                |
| SEXO      | enum('M','F') | NO   |     | NULL    |                |
| EMAIL     | varchar(50)   | YES  | UNI | NULL    |                |
| CPF       | varchar(15)   | YES  | UNI | NULL    |                |
+-----------+---------------+------+-----+---------+----------------+

+------------+-------------------------+------+-----+---------+----------------+
| Field      | Type                    | Null | Key | Default | Extra          |
+------------+-------------------------+------+-----+---------+----------------+
| IDTELEFONE | int(11)                 | NO   | PRI | NULL    | auto_increment |
| TIPO       | enum('RES','COM','CEL') | NO   |     | NULL    |                |
| NUMERO     | varchar(10)             | NO   |     | NULL    |                |
| ID_CLIENTE | int(11)                 | YES  | MUL | NULL    |                |
+------------+-------------------------+------+-----+---------+----------------+

+------------+-------------+------+-----+---------+----------------+
| Field      | Type        | Null | Key | Default | Extra          |
+------------+-------------+------+-----+---------+----------------+
| IDENDERECO | int(11)     | NO   | PRI | NULL    | auto_increment |
| RUA        | varchar(30) | NO   |     | NULL    |                |
| BAIRRO     | varchar(30) | NO   |     | NULL    |                |
| CIDADE     | varchar(30) | NO   |     | NULL    |                |
| ESTADO     | char(2)     | NO   |     | NULL    |                |
| ID_CLIENTE | int(11)     | YES  | UNI | NULL    |                |
+------------+-------------+------+-----+---------+----------------+

SELECT * FROM CLIENTE;

SELECT C.NOME, C.SEXO,
		 T.TIPO, T.NUMERO,
		 E.CIDADE, E.ESTADO
FROM CLIENTE C
INNER JOIN TELEFONE T ON C.idcliente=T.id_cliente
INNER JOIN ENDERECO E ON C.idcliente=E.id_cliente;



SELECT C.NOME, C.SEXO,
		 T.TIPO, T.NUMERO,
		 E.CIDADE, E.ESTADO
FROM CLIENTE C
INNER JOIN TELEFONE T ON C.idcliente=T.id_cliente
INNER JOIN ENDERECO E ON C.idcliente=E.id_cliente
WHERE SEXO ="M";

SELECT C.NOME, C.SEXO,
		 T.TIPO, T.NUMERO,
		 E.CIDADE, E.ESTADO
FROM CLIENTE C
INNER JOIN TELEFONE T ON C.idcliente=T.id_cliente
INNER JOIN ENDERECO E ON C.idcliente=E.id_cliente
WHERE SEXO ="F";

SELECT COUNT(*), SEXO FROM CLIENTE
GROUP BY SEXO;

SELECT C.idcliente, C.email FROM CLIENTE C
INNER JOIN TELEFONE T ON C.idcliente=T.id_cliente
WHERE T.tipo = "RES" AND T.tipo = "COM";


SELECT C.IDCLIENTE, C.EMAIL FROM CLIENTE C
INNER JOIN TELEFONE T ON C.idcliente=T.id_cliente
INNER JOIN ENDERECO E ON C.idcliente=E.id_cliente
WHERE  C.SEXO = "F" AND (T.TIPO = "RES" or T.TIPO = "COM") AND E.BAIRRO = "CENTRO" AND E.CIDADE = "RIO DE JANEIRO";



-- ATUALIZAR OS DADOS
UPDATE cliente set sexo = "F"
WHERE IDCLIENTE in (12,13,18,19);

UPDATE cliente set sexo = "M"
WHERE IDCLIENTE = 16;

SELECT C.NOME, C.EMAIL, T.NUMERO AS CELULAR FROM CLIENTE C
INNER JOIN TELEFONE T ON C.IDCLIENTE=T.ID_CLIENTE
INNER JOIN ENDERECO E ON C.IDCLIENTE=E.ID_CLIENTE
WHERE c.SEXO="M" AND T.TIPO="CEL" AND E.ESTADO="RJ";

SELECT C.NOME, C.EMAIL, T.NUMERO AS CELULAR FROM CLIENTE C
INNER JOIN TELEFONE T ON C.IDCLIENTE=T.ID_CLIENTE
INNER JOIN ENDERECO E ON C.IDCLIENTE=E.ID_CLIENTE
WHERE C.SEXO="F" AND T.TIPO="CEL" AND E.ESTADO="SP";



SELECT C.nome, C.email, E.estado, T.numero FROM CLIENTE C
INNER JOIN ENDERECO E ON C.IDCLIENTE=E.ID_CLIENTE
INNER JOIN TELEFONE T ON C.IDCLIENTE=T.ID_CLIENTE


SELECT C.nome,
		 IFNULL(C.email,"Não tem email") as email,
		 E.estado,
		 T.numero
FROM CLIENTE C
INNER JOIN ENDERECO E ON C.IDCLIENTE=E.ID_CLIENTE
INNER JOIN TELEFONE T ON C.IDCLIENTE=T.ID_CLIENTE


/* VIEW */

SELECT C.NOME,
		 C.SEXO,
		 C.EMAIL,
		 T.TIPO,
		 T.NUMERO,
		 E.BAIRRO,
		 E.CIDADE,
		 E.ESTADO
FROM CLIENTE C
INNER JOIN ENDERECO E ON C.IDCLIENTE=E.ID_CLIENTE
INNER JOIN TELEFONE T ON C.IDCLIENTE=T.ID_CLIENTE;

CREATE VIEW RELATORIO AS
SELECT C.NOME,
		 C.SEXO,
		 C.EMAIL,
		 T.TIPO,
		 T.NUMERO,
		 E.BAIRRO,
		 E.CIDADE,
		 E.ESTADO
FROM CLIENTE C
INNER JOIN ENDERECO E ON C.IDCLIENTE=E.ID_CLIENTE
INNER JOIN TELEFONE T ON C.IDCLIENTE=T.ID_CLIENTE

SELECT * FROM RELATORIO;

show tables; -- A VIEW APARECE NO SHOW TABLES, FICA ESPERTO

DROP VIEW RELATORIO;

/* inserindo um prefixo*/
CREATE VIEW V_RELATORIO AS
SELECT C.NOME,
		 C.SEXO,
		 IFNULL(C.EMAIL,"Não tem email") as "Email",
		 T.TIPO,
		 T.NUMERO,
		 E.BAIRRO,
		 E.CIDADE,
		 E.ESTADO
FROM CLIENTE C
INNER JOIN ENDERECO E ON C.IDCLIENTE=E.ID_CLIENTE
INNER JOIN TELEFONE T ON C.IDCLIENTE=T.ID_CLIENTE;

+--------------------+
| Tables_in_comercio |
+--------------------+
| cliente            |
| endereco           |
| produto            |
| telefone           |
| v_relatorio        |
+--------------------+

SELECT NOME, NUMERO, ESTADO
FROM V_RELATORIO;

INSERT INTO V_RELATORIO VALUES(
"ANDREIA","F","ANDREIA@UOL.COM.BR","CEL","9875231","CENTRO","VITORIA","ES");

CREATE TABLE JOGADORES(
	IDJOGADOR INT,
	NOME VARCHAR(30),
	ESTADO CHAR(2)
);

INSERT INTO JOGADORES VALUES(1,'GUERRERO','RS');
INSERT INTO JOGADORES VALUES(2,'GABIGOL','RJ');
INSERT INTO JOGADORES VALUES(3,'GANSO','RJ');
INSERT INTO JOGADORES VALUES(4,'NENÊ', 'RJ');
INSERT INTO JOGADORES VALUES(5,'LOVE','SP');

CREATE VIEW V_JOGADORES AS
SELECT NOME, ESTADO
FROM JOGADORES;

CREATE TABLE ALUNOS(
	NUMERO INT,
	NOME VARCHAR(30)
);



/* ORDER BY*/

SELECT * FROM ALUNOS
ORDER BY NUMERO;

SELECT * FROM ALUNOS
ORDER BY 1;

SELECT * FROM ALUNOS
ORDER BY 2;

/* ORDENANDO POR MAIS DE UMA COLUNA*/

SELECT * FROM ALUNOS
ORDER BY 2;

SELECT * FROM ALUNOS
ORDER BY NUMERO,NOME;

SELECT * FROM ALUNOS
ORDER BY 1,2;


SELECT NOME FROM ALUNOS
ORDER BY 1,2; -- NÃO VAI FUNCIONAR PQ O NÚMERO VAI PELA TABELA
SELECT NOME FROM ALUNOS
ORDER BY NUMERO,NOME; -- NÃO VAI FUNCIONAR PQ O NÚMERO VAI PELA TABELA

/* ORDER BY DESC/ASC*/

SELECT * FROM ALUNOS
ORDER BY 1 DESC;

SELECT * FROM ALUNOS
ORDER BY 1 ASC;

SELECT * FROM ALUNOS
ORDER BY 1, 2 DESC;

SELECT * FROM ALUNOS
ORDER BY 1 DESC, 2 ASC;


/*ORDENANDO COM JOINS*/
SELECT C.NOME,
		 C.SEXO,
		 IFNULL(C.EMAIL,"Não tem email") as "Email",
		 T.TIPO,
		 T.NUMERO,
		 E.BAIRRO,
		 E.CIDADE,
		 E.ESTADO
FROM CLIENTE C
INNER JOIN ENDERECO E ON C.IDCLIENTE=E.ID_CLIENTE
INNER JOIN TELEFONE T ON C.IDCLIENTE=T.ID_CLIENTE
ORDER BY 1;

SELECT * FROM V_RELATORIO
ORDER BY 1;

DELIMITER $ -- TROCOU O DELIMITER



/* stored procedures */

SELECT "MAFRA";

DELIMITER $ 

CREATE PROCEDURE NOME()
BEGIN

	QUALQUER PROGRAMACAO

END
$


CREATE PROCEDURE NOME_EMPRESA()
BEGIN
	SELECT "UNIVERSIDADE DOS DADOS" AS EMPRESA;
END
$

CALL NOME_EMPRESA$

DROP PROCEDURE NOME_EMPRESA;




CREATE PROCEDURE CONTA(NUMERO1 INT, NUMERO2 INT)
BEGIN
	SELECT NUMERO1+NUMERO2 AS CONTA;
END
$

CALL CONTA(100,50)$
CALL CONTA(10530,5021)$



/* PROCEDURES */

CREATE DATABASE PROJETOO;

CREATE TABLE CURSOS (
 IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
 NOME VARCHAR(30) NOT NULL,
 HORAS INT(3) NOT NULL,
 VALOR FLOAT(10,2) NOT NULL
);

INSERT INTO CURSOS VALUES(NULL,"JAVA",30,500.00);
INSERT INTO CURSOS VALUES(NULL,"FUNDAMENTOS DE BANCO DE DADOS",40,700.00);
+---------+-------------------------------+-------+--------+
| IDCURSO | NOME                          | HORAS | VALOR  |
+---------+-------------------------------+-------+--------+
|       1 | JAVA                          |    30 | 500.00 |
|       2 | FUNDAMENTOS DE BANCO DE DADOS |    40 | 700.00 |
+---------+-------------------------------+-------+--------+

SELECT * FROM CURSOS;

DELIMITER #

STATUS

CREATE PROCEDURE CAD_CURSO(P_NOME VARCHAR(30),-- ESSA PARTE DE CIMA É CORRESPONDENTE A TABELA
								   P_HORAS INT(3),
								   P_PRECO FLOAT(10,2))
BEGIN
	-- NÃO PRECISA COLOCAR O VALOR NULO NA PARTE DE CIMA
	INSERT INTO CURSOS VALUES(NULL,P_NOME,P_HORAS,P_PRECO); -- ISSO PRECISTA ESTAR LIGADO COM A PARTE DE CIMA, PRECISA ESTAR IGUAL
	--não esquece do ;;;;;;
END
#

CREATE PROCEDURE CAD_CURSO(P_NOME VARCHAR(30), 
								   P_HORAS INT(3),
								   P_PRECO FLOAT(10,2))
BEGIN
	INSERT INTO CURSOS VALUES(NULL,P_NOME,P_HORAS,P_PRECO);
END
#

DELIMITER ;

CALL CAD_CURSO("BI SQL SERVER",35,3000.00);
CALL CAD_CURSO("POWE BI",20,1000.00);
CALL CAD_CURSO("TABLEAU",30,1200.00);

/*JEAN TESTANDO A ESTRUTURA*/

DELIMITER $

CREATE PROCEDURE CAD_CURSOO(P_HORAS INT(3), 
								   P_NOME VARCHAR(30),
								   P_PRECO FLOAT(10,2))
BEGIN
	INSERT INTO CURSOS VALUES(NULL,P_HORAS,P_NOME,P_PRECO);
END
$

CALL CAD_CURSOO(35,55,3000.00);

DELETE FROM CURSOS
WHERE IDCURSO = 7;


NÃO FUNCIONAAA PRECISA SER EM SEQUENCIA 
/*----------------*/
DROP PROCEDURE CAD_CURSOO;


/* CRIAR UMA PROCEDURE PARA CONSULTAR CURSOS */
CREATE PROCEDURE CONS_CURSOS()
BEGIN
	SELECT NOME, HORAS, VALOR FROM CURSOS;
END
$

DELIMITER ;

CALL CONS_CURSOS;



/*---------------------*/

/* SOMA E ETCCC*/
CREATE DATABASE VENDA;
CREATE TABLE VENDEDORES (
	IDVENDEDOR INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	SEXO CHAR(1),
	JANEIRO FLOAT(10,2),
	FEVEREIRO FLOAT(10,2),
	MARCO FLOAT(10,2)
);

INSERT INTO VENDEDORES VALUES(NULL,"CARLOS","M",762.34,15613.52,56546.22);
INSERT INTO VENDEDORES VALUES(NULL,"MARIA","F",5665.34,1555613.52,564566.22);
INSERT INTO VENDEDORES VALUES(NULL,"ANTONIO","M",55.34,322.52,56446.22);
INSERT INTO VENDEDORES VALUES(NULL,"CLARA","F",12.34,15613.52,524646.22);
INSERT INTO VENDEDORES VALUES(NULL,"ANDERSON","M",8762.34,15613.52,5695446.22);
INSERT INTO VENDEDORES VALUES(NULL,"IVONE","F",76562.34,15622113.52,56646.22);
INSERT INTO VENDEDORES VALUES(NULL,"JOAO","M",76212.34,156513.52,568846.22);
INSERT INTO VENDEDORES VALUES(NULL,"CELIA","F",72162.34,444.52,5.22);

SELECT MAX(FEVEREIRO) AS MAIOR_FEV
FROM VENDEDORES;

SELECT MIN(FEVEREIRO) AS MENOR_FEV
FROM VENDEDORES;

SELECT AVG(FEVEREIRO) AS MEDIA_FEV
FROM VENDEDORES;

SELECT MAX(JANEIRO) AS MAX_JAN,
		 MIN(JANEIRO) AS MIN_JAN,
		 AVG(JANEIRO) AS MEDIA_JAN
		 FROM VENDEDORES;

/* TRUNCATE*/

SELECT MAX(JANEIRO) AS MAX_JAN,
		 MIN(JANEIRO) AS MIN_JAN,
		 TRUNCATE(AVG(JANEIRO),2) AS AVG_JAN
		 FROM VENDEDORES;

/*SOMAR*/

SELECT SUM(JANEIRO) AS TOTAL_JAN
FROM VENDEDORES;
-- para legos
+------------+----------+------+----------+-------------+------------+
| IDVENDEDOR | NOME     | SEXO | JANEIRO  | FEVEREIRO   | MARCO      |
+------------+----------+------+----------+-------------+------------+
|          1 | CARLOS   | M    |   762.34 |    15613.52 |   56546.22 |
|          2 | MARIA    | F    |  5665.34 |  1555613.50 |  564566.25 |
|          3 | ANTONIO  | M    |    55.34 |      322.52 |   56446.22 |
|          4 | CLARA    | F    |    12.34 |    15613.52 |  524646.25 |
|          5 | ANDERSON | M    |  8762.34 |    15613.52 | 5695446.00 |
|          6 | IVONE    | F    | 76562.34 | 15622114.00 |   56646.22 |
|          7 | JOAO     | M    | 76212.34 |   156513.52 |  568846.25 |
|          8 | CELIA    | F    | 72162.34 |      444.52 |       5.22 |
+------------+----------+------+----------+-------------+------------+
OQ O COMANDO FEZ, ELE PEGOU A    240194.73
TABELA DE JANEIRO E SOMOU TUDO
EMBAIXO DELA

SELECT SUM(JANEIRO) AS TOTAL_JAN,
		 SUM(FEVEREIRO) AS TOTAL_FEV,
		 SUM(MARCO) AS TOTAL_MAR
FROM VENDEDORES;

--TUDO ISSO SE PARECE MUITO COM O COUNT

/* VENDAS POR SEXO */

SELECT SEXO,SUM(MARCO) AS TOTAL_MAR
FROM VENDEDORES
GROUP BY SEXO;

SELECT NOME, MARCO FROM VENDEDORES
WHERE MARCO = (SELECT MIN(MARCO) FROM VENDEDORES);

SELECT NOME, MARCO FROM VENDEDORES
WHERE MARCO = (SELECT MAX(FEVEREIRO) FROM VENDEDORES);

SELECT NOME, MARCO FROM VENDEDORES
WHERE MARCO > (SELECT AVG(MARCO) FROM VENDEDORES);

SELECT NOME, MARCO FROM VENDEDORES
WHERE FEVEREIRO > (SELECT AVG(FEVEREIRO) FROM VENDEDORES);

SELECT NOME, MARCO FROM VENDEDORES
WHERE MARCO < (SELECT AVG(MARCO) FROM VENDEDORES);



/* OPERAÇÕES EM LINHA */

SELECT NOME,
		 JANEIRO,
		 FEVEREIRO,
		 MARCO,
		 (JANEIRO+FEVEREIRO+MARCO) AS "TOTAL",
		 TRUNCATE((JANEIRO+FEVEREIRO+MARCO)/3,2) AS "MEDIA"
		 FROM VENDEDORES;

/* APLICANDO %*/
SELECT NOME,
		 JANEIRO,
		 FEVEREIRO,
		 MARCO,
		 (JANEIRO+FEVEREIRO+MARCO) AS "TOTAL",
		 (JANEIRO+FEVEREIRO+MARCO)*.25 AS "DESCONTO",
		 TRUNCATE((JANEIRO+FEVEREIRO+MARCO)/3,2) AS "MEDIA"
		 FROM VENDEDORES;


CREATE TABLE TABELA(
	COLUNA1 VARCHAR(30),
	COLUNA2 VARCHAR(30),
	COLUNA3 VARCHAR(30)
);

ALTER TABLE TABELA
ADD PRIMARY KEY (COLUNA1);

ALTER TABLE TABELA
ADD COLUNA VARCHAR(30);

ALTER TABLE TABELA
ADD COLUNA100 INT;

ALTER TABLE TABELA
ADD COLUMN COLUNA4 VARCHAR(30) NOT NULL UNIQUE
AFTER COLUNA3;

ALTER TABLE TABELA
MODIFY COLUNA2 DATE NOT NULL;

ALTER TABLE TABELA
RENAME PESSOA;

CREATE TABLE TIME(
	IDTIME INT PRIMARY KEY AUTO_INCREMENT,
	TIME VARCHAR(30),
	ID_PESSOA VARCHAR(30)
);

ALTER TABLE TIME
ADD FOREIGN KEY (ID_PESSOA) 
REFERENCES PESSOA(COLUNA1);



SELECT L.NOME_LIVROS FROM LIVROS L
WHERE dDA = 11
INNER JOIN VENDAS V ON (L.IDLIVRO = V.i);



# selecionar de data entre data
SELECT *
FROM NOME_LIVROS
WHERE DATA BETWEEN '2020-01-01' AND '2021-02-12'
ORDER BY DATA;

select
id_cupom,
 format(data_venda,'dd/MM/yyyy HH:mm:ss') as DataVendaBr,
 format(valor,'c','pt-br') as ValorReais
from  bd_vendas_carro.dbo.tab_cupom_vendas
where CAST(data_venda as date) between cast( dateadd (day,-7,getdate()) as date)   
                               and  cast (getdate() as date)
order by data_venda desc

SELECT L.NOME_LIVRO, v.DATA_VENDA FROM LIVROS L
INNER JOIN VENDAS V ON L.IDLIVRO=V.IDLIVRO
WHERE V.DATA_VENDA BETWEEN '2020-01-01' AND '2020-11-03'
ORDER BY V.DATA_VENDA;

SELECT L.NOME_LIVRO, v.DATA_VENDA FROM LIVROS L
INNER JOIN VENDAS V ON L.IDLIVRO=V.IDLIVRO
WHERE V.DATA_VENDA >= "2020-11-02"
ORDER BY V.DATA_VENDA;